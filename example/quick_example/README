Introduction
============

This directory holds an example of how to run MARGE to train a neural network to predict  
the (x,y) location on a unit circle given some angle.  While this problem does not require 
a neural network to solve, it demonstrates how to use the software and it is a simple, 
quick problem.


Walkthrough
===========

1. Generate the data.
      python make_data.py

2a. Run a range test to determine reasonable limits for the learning rate.
      python ../../MARGE.py MARGE_rangetest.cfg > rangetest.log

2b. Look at outputs_rangetest/plots/history_clr_loss.png.  The minimum learning rate 
    is when the loss begins decreasing.  The maximum learning rate is just before the 
    loss begins increasing (see User Manual for more details).  Use this for the 
    optimization in step 3.  You may wish to use a few different ranges to ensure the 
    best architecture is not dependent on the selected range.

3a. Optimize the model architecture for the learning rate range(s) selected in (2b).  
    This can be done using a grid search (less accurate) or a Bayesian optimization 
    (more computationally expensive).  If you do not have a GPU on your machine, 
    this will take a significant amount of time.  If you have multiple GPUs available, 
    edit the configuration file to set `optngpus' to the number of GPUs you have.
      python ../../MARGE.py MARGE_optimization.cfg > optimization.log

3b. Look at outputs_optimization/optuna-ordered-summary.txt and see which architecture(s) 
    performed best.  

4. Update MARGE_run.cfg with the architecture(s) selected in (3b) and train in full.
      python ../../MARGE.py MARGE_run.cfg > run.log

